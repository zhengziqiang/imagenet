


    预处理图像的leveldb构建 
    输入：一批图像和label （2和3） 
    输出：leveldb （4） 
    指令里包含如下信息：
        convert_imageset （构建leveldb的可运行程序）将照片文件变为leveldb格式或者lmdb格式
        train/ （此目录放处理的jpg或者其他格式的图像)
        label.txt (图像文件名及其label信息)标签文件的信息
        输出的leveldb文件夹的名字
        CPU/GPU (指定是在cpu上还是在gpu上运行code)

    CNN网络配置文件
        Imagenet_solver.prototxt （包含全局参数的配置的文件）解决方案的编写
        Imagenet.prototxt （包含训练网络的配置的文件）网络层的定义和编写
        Imagenet_val.prototxt （包含测试网络的配置文件）测试文件
lr_mult: 1 (weight的学习率).
lr_mult: 2 (bias的学习率).
layer {

  name: "conv1" // 该层的名字
  type: "Convolution" // 该层的类型，具体地，可选的类型有：Convolution、
  bottom: "data" // 该层的输入数据Blob的名字
  top: "conv1" // 该层的输出数据Blob的名字

  // 该层的权值和偏置相关参数
  param { 
    lr_mult: 1  //weight的学习率
  }
  param {
    lr_mult: 2  // bias的学习率
  }

  // 该层（卷积层）的卷积运算相关的参数
  convolution_param {
    num_output: 20
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"  // weights初始化方法
    }
    bias_filler {
      type: "constant" // bias初始化方法
    }
  }

}

注意接下来的一段文字是上面是注释，下面是代码

 Blob<int> pad_;  
  /// @brief The spatial dimensions of the convolution input.  
  // 卷积的输入形状 = [输入图像通道数, 输入图像h,    输入图像w]  
  Blob<int> conv_input_shape_;  
  /// @brief The spatial dimensions of the col_buffer.  
  // col_buffer的形状 = [kernel_dim_, conv_out_spatial_dim_ ]  
  vector<int> col_buffer_shape_;  
  /// @brief The spatial dimensions of the output.  
  // 输出的形状  
  vector<int> output_shape_;  
  // 输入的形状  
  const vector<int>* bottom_shape_;  
  // 空间轴个数  
  int num_spatial_axes_;  
  // 输入度维度 = 输入图像通道数*输入图像的h*输入图像w  
  int bottom_dim_;  
  // 输出维度 = 输出通道数*输出h*输出w  
  int top_dim_;  
  // 输入图像的第几个轴是通道  
  int channel_axis_;  
  // batchsize  
  int num_;  
  // 输入图像的通道数  
  int channels_;  
  // 卷积组的大小  
  int group_;  
  // 输出空间维度 = 卷积之后的图像长*卷积之后图像的宽  
  int out_spatial_dim_;  
  // 使用卷积组用到的  
  int weight_offset_;  
  // 卷积后的图像的通道数  
  int num_output_;  
  // 是否启用偏置  
  bool bias_term_;  
  // 是不是1x1卷积  
  bool is_1x1_;  
  // 强制使用n维通用卷积  
  bool force_nd_im2col_;  
  // conv_in_channels_ * conv_out_spatial_dim_  
  int num_kernels_im2col_;  
  // num_kernels_col2im_ = reverse_dimensions() ? top_dim_ : bottom_dim_  
  int num_kernels_col2im_;  
  // 卷积的输出通道数 ,在参数配置文件中设置  
  int conv_out_channels_;  
  // 卷积的输入通道数 （即输入图像的通道数）  
  int conv_in_channels_;  
  // 卷积的输出的空间维度 = 卷积后图像h*卷积后图像w  
  int conv_out_spatial_dim_;  
  // 卷积核的维度 = 输入图像的维度*卷积核的h*卷积核的w  
  int kernel_dim_;  
  // 在使用gropu参数的时候使用的offset  
  int col_offset_;  
  int output_offset_;  
  // im2col的时候使用的存储空间  
  Blob<Dtype> col_buffer_;  
  // 将偏置扩展成矩阵的东东  
  Blob<Dtype> bias_multiplier_;  
